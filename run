#!/usr/bin/env ruby

require 'yaml'
require 'fileutils'
require 'net/http'
require 'base64'
require 'uri'
require 'json'

class Play
  attr_reader :home_path, :config_path, :data_path, :logs_path,
 	      :heartbeat_path, :cloud_id, :cloud_auth,
	      :monitors, :domain, :run_for, :name

  def initialize(src)
    @name = src["name"]
    
    @home_path = src["home_path"]
    @config_path = File.join(@home_path, "config")
    @data_path = File.join(@home_path, "data")
    @logs_path = File.join(@home_path, "logs")
    
    @heartbeat_path = src["heartbeat_path"]
    @cloud_id = src["cloud_id"]
    @cloud_auth = src["cloud_auth"]
    @monitors = src["monitors"]
    @domain = src["domain"]

    @run_for = src["run_for"]

    cluster_zone_domain, cluster_sub_domain, extra = Base64.decode64(cloud_id.split(":")[1]).split("$") 
    cluster_domain = "#{cluster_sub_domain}.#{cluster_zone_domain}"
    @es_user, @es_pass = cloud_auth.split(":")
    @cluster_url = URI("https://#{@us_user}:#{@es_pass}@#{cluster_domain}")
    puts "CLUSTER URL: #{@cluster_url}"
    @cluster_client = Net::HTTP.new(cluster_domain, 443)
    @cluster_client.use_ssl = true
  end
  
  def clear_cluster_data
    del = Net::HTTP::Delete.new("/heartbeat-*")
    del.basic_auth(@es_user, @es_pass)
    puts @cluster_client.request(del).inspect
  end

  def agg_docs
    req = Net::HTTP::Get.new("/heartbeat-*/_search?size=0")
    req.basic_auth(@es_user, @es_pass)
    req["Content-Type"] = "application/json"
    req.body = {
      "aggs" => {
        "status" => {
          "filters" => {
            "filters" => {
              "up" => {"match" => {"monitor.status" => "up"}},
              "down" => {"match" => {"monitor.status" => "down"}}
            }
          }
        }
      }
    }.to_json
    body = JSON.parse(@cluster_client.request(req).body)
    res = {
      docs_total: body["hits"]["total"]["value"],
      docs_up: body["aggregations"]["status"]["buckets"]["up"]["doc_count"],
      docs_down: body["aggregations"]["status"]["buckets"]["down"]["doc_count"],
    }
    res
  end

  def gen_config()
    FileUtils.rm_rf(self.home_path)
    FileUtils.mkdir_p(self.config_path)
    FileUtils.mkdir_p(self.data_path)
    FileUtils.mkdir_p(self.logs_path)

    config = YAML.load_file('heartbeat.base.yml')

    config['heartbeat.monitors'] = self.monitors.times.with_index.map do |m,i|
      {
        "type" => "http",
        "id" => "monitor-#{i}",
        "urls" => ["http://#{self.domain}"],
        "schedule" => "@every 10s"
      }
    end
  
    File.open(File.join(self.config_path, 'heartbeat.yml'), 'w') do |f|
      f << config.to_yaml
    end

    FileUtils.chmod_R(0600, File.join(self.config_path, 'heartbeat.yml'))
  end

  def run()
    self.clear_cluster_data()
    self.gen_config()

    cmd = [
      self.heartbeat_path,
      '-c', 'heartbeat.yml',
      "--path.config", self.config_path,
      "--path.home", self.home_path,
      "--path.data", self.data_path,
      "--path.logs", self.logs_path,
      "-E", "cloud.id=\"#{self.cloud_id}\"",
      "-E", "cloud.auth=\"#{self.cloud_auth}\""
    ]

    puts "Executing: #{cmd.join(' ')}"
  
    pid = fork do
      exec *cmd
    end

    cpu_samples = []
    rss_samples = []
    started = Time.now()
    while Time.now()-started < self.run_for do
      cpu, rss = `ps u -p #{pid} | tail -n 1 | awk '{print $3,$5}'`.split()
      cpu_samples << cpu.to_f
      rss_samples << rss.to_i
      sleep 1
    end

    puts "Sleeping for #{self.run_for}"
    sleep self.run_for


    puts "Killing subprocess #{pid}"
    Process.kill("KILL", pid)
    Process.waitpid(pid)

    errs = `grep ERROR #{self.logs_path}/* | wc -l`.to_i
    warns = `grep WARN #{self.logs_path}/* | wc -l`.to_i
    @summary = {
      avg_cpu_pct: cpu_samples.reduce(:+) / cpu_samples.size,
      max_cpu_pct: cpu_samples.max,
      avg_rss_mib: (rss_samples.reduce(:+) / 1024) / rss_samples.size,
      max_rss_mib: rss_samples.max  / 1024, # kib to mib
      num_error_logs: errs,
      num_warn_logs: warns,
    }.merge(self.agg_docs)

    puts @summary.to_yaml
  end
  
  def summary_header()
    return "name, monitors, " + @summary.keys.sort.join(", ")
  end

  def summary()
    return "\"#{self.name}\", #{self.monitors}," + 
             @summary.keys.sort.map do |k| 
               v = @summary[k]
               if k =~ /_pct$/
                 v = "#{v}%"
               end
               "\"#{v}\""
             end.join(", ")
  end
end

def main()
  playbook = YAML.load_file('playbook.yml')
  plays = playbook["plays"].map do |play_src|
    Play.new(play_src.merge(playbook['global']))
  end
  
  plays.each(&:run)

  puts plays.first.summary_header()
  plays.each do |play|
    puts play.summary()
  end
end

main()
